{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["table","Map","Object","entries","nanikiru301","TABLE","db","DB","App","answerRef","useRef","useState","answerState","setAnswerState","probNum","setProbNum","nanikiru","translateTileString","tileStr","tilePattern","result","patternSet","Set","i","length","has","tile","push","get","실표기","reverse","comments","comm","onChange","event","parseInt","target","value","selects","makeProbSelect","type","onClick","min","max","Math","floor","random","title","id","name","defaultValue","ref","userAnswer","current","replace","correctAnswer","map","val","idx","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.7a688128.chunk.js","sourcesContent":["import React, { useRef, useState } from \"react\";\nimport nanikiru301 from \"./data/nanikiru301.json\";\n\nconst table = new Map(Object.entries(nanikiru301.TABLE));\nconst db = nanikiru301.DB;\n\nfunction App() {\n  const answerRef = useRef<HTMLInputElement>(null);\n  const [answerState, setAnswerState] = useState(false);\n  const [probNum, setProbNum] = useState(0);\n\n  const nanikiru = new Map(Object.entries(db[probNum]));\n\n  const checkAnswer = () => {\n    let userAnswer = answerRef.current?.value as string;\n    userAnswer = userAnswer.replace(/ +/g, \"\");\n    let correctAnswer =\n      (nanikiru.get(\"정답1\") as string) + (nanikiru.get(\"정답2\") || \"\");\n    correctAnswer = correctAnswer.replace(/ +/g, \"\");\n    setAnswerState(userAnswer === correctAnswer);\n  };\n\n  const translateTileString = (tileStr: string) => {\n    let tilePattern = \"\";\n    let result = [];\n    const patternSet = new Set([\"m\", \"s\", \"p\"]);\n    for (let i = tileStr.length - 1; i >= 0; --i) {\n      if (patternSet.has(tileStr[i])) {\n        tilePattern = tileStr[i];\n      } else {\n        const tile = tileStr[i] + tilePattern;\n        result.push(<span key={tile + i}>{table.get(tile)?.실표기}</span>);\n      }\n    }\n    return result.reverse();\n  };\n\n  const makeProbSelect = () => {\n    let selects = [];\n    for (let i = 1; i <= db.length; ++i) {\n      selects.push(\n        <option key={\"op\" + i} value={i - 1}>\n          {i}\n        </option>\n      );\n    }\n\n    return selects;\n  };\n\n  const selectProblem = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setProbNum(parseInt(event.target.value));\n  };\n\n  const selectRandomProblem = () => {\n    const randomIntFromInterval = (min: number, max: number) => {\n      // min and max included\n      return Math.floor(Math.random() * (max - min + 1) + min);\n    };\n    setProbNum(randomIntFromInterval(0, db.length - 1));\n  };\n\n  let comments = [];\n  for (let i = 1; i <= 10; ++i) {\n    const comm = nanikiru.get(\"해설\" + i);\n    if (!!comm) {\n      comments.push(comm);\n    }\n  }\n\n  return (\n    <div>\n      <table>\n        <tbody>\n          <tr>\n            <td>\n              <select onChange={selectProblem} value={probNum}>\n                {makeProbSelect()}\n              </select>\n            </td>\n            <td>\n              <button\n                type=\"button\"\n                key={\"randomButton\"}\n                onClick={selectRandomProblem}\n              >\n                랜덤 문제\n              </button>\n            </td>\n          </tr>\n          <tr>\n            <td>문제 {nanikiru.get(\"문제번호\")}: </td>\n            <td>{nanikiru.get(\"조건\")}</td>\n          </tr>\n          <tr>\n            <td>도라 표시패: </td>\n            <td>\n              <p>{translateTileString(nanikiru.get(\"도라표지\") as string)}</p>\n            </td>\n          </tr>\n          <tr>\n            <td>손패: </td>\n            <td>\n              <p>\n                {translateTileString(nanikiru.get(\"패\") as string)} &ensp;\n                {translateTileString(nanikiru.get(\"쯔모\") as string)}\n              </p>\n            </td>\n          </tr>\n          <tr>\n            <td>입력값: </td>\n            <td>\n              <div>\n                <input\n                  type=\"text\"\n                  title=\"입력\"\n                  id=\"answer\"\n                  name=\"answer\"\n                  defaultValue={\"\"}\n                  ref={answerRef}\n                />\n                <button type=\"button\" onClick={checkAnswer}>\n                  제출\n                </button>\n              </div>\n            </td>\n          </tr>\n          <tr>\n            <td>정답: </td>\n            <td>\n              {answerState &&\n                nanikiru.get(\"정답1\") + \" \" + (nanikiru.get(\"정답2\") || \"\")}\n            </td>\n          </tr>\n          <tr>\n            <td>유효패: </td>\n            <td>{answerState && nanikiru.get(\"유효패\")}</td>\n          </tr>\n          <tr>\n            <td>해설: </td>\n            <td>\n              <p>\n                {answerState &&\n                  comments.map((val, idx) => {\n                    return (\n                      <span key={(val as string) + idx}>\n                        {val}\n                        <br />\n                      </span>\n                    );\n                  })}\n              </p>\n            </td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(\n  document.getElementById('root') as HTMLElement\n);\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}