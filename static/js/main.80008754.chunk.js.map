{"version":3,"sources":["App.tsx","index.tsx"],"names":["table","Map","Object","entries","nanikiru301","TABLE","db","DB","App","useState","answerState","setAnswerState","probNum","setProbNum","nanikiru","translateTileString","tileStr","tilePattern","result","patternSet","Set","i","length","has","tile","push","get","실표기","reverse","join","updateProblem","number","Math","floor","comments","comm","callArray","call","callTile","callList","Box","paddingBottom","Toolbar","Grid","container","flexDirection","alignItems","justifyContent","item","FormControl","size","InputLabel","id","Select","labelId","onChange","event","parseInt","target","value","toString","label","autoWidth","selects","MenuItem","makeProbSelect","Divider","TableContainer","Table","TableBody","TableRow","TableCell","variant","width","Button","onClick","map","val","idx","Paper","sx","position","bottom","left","right","elevation","BottomNavigation","showLabels","newValue","min","max","random","selectRandomProblem","BottomNavigationAction","icon","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.80008754.chunk.js","sourcesContent":["import {\n  BottomNavigation,\n  BottomNavigationAction,\n  Box,\n  Button,\n  Divider,\n  FormControl,\n  Grid,\n  InputLabel,\n  MenuItem,\n  Paper,\n  Select,\n  SelectChangeEvent,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableRow,\n  Toolbar,\n} from \"@mui/material\";\nimport BackIcon from '@mui/icons-material/ArrowCircleLeft';\nimport ForwardIcon from '@mui/icons-material/ArrowCircleRight';\nimport RandomIcon from '@mui/icons-material/QuestionMark';\nimport { useState } from \"react\";\nimport nanikiru301 from \"./data/nanikiru301.json\";\n\nconst table = new Map(Object.entries(nanikiru301.TABLE));\nconst db = nanikiru301.DB;\n\nfunction App() {\n  //const answerRef = useRef<HTMLInputElement>(null);\n  const [answerState, setAnswerState] = useState(false);\n  const [probNum, setProbNum] = useState(0);\n\n  const nanikiru = new Map(Object.entries(db[probNum]));\n\n\n  const translateTileString = (tileStr: string) => {\n    let tilePattern = \"\";\n    let result: string[] = [];\n    const patternSet = new Set([\"m\", \"s\", \"p\"]);\n    for (let i = tileStr.length - 1; i >= 0; --i) {\n      if (patternSet.has(tileStr[i])) {\n        tilePattern = tileStr[i];\n      } else {\n        const tile = tileStr[i] + tilePattern;\n        result.push((table.get(tile)?.실표기) as string);\n      }\n    }\n    return result.reverse().join('');\n  };\n\n  const makeProbSelect = () => {\n    let selects = [];\n    for (let i = 1; i <= db.length; ++i) {\n      selects.push(\n        <MenuItem key={\"op\" + i} value={i - 1}>\n          {i}\n        </MenuItem>\n      );\n    }\n\n    return selects;\n  };\n\n  const updateProblem = (number: number) => {\n    setAnswerState(false);\n    //answerRef.current!.value = \"\";\n    number = number == -1 ? db.length - 1 : number\n    number = number > db.length - 1 ? 0 : number\n    setProbNum(Math.floor(number));\n  }\n  const selectProblem = (event: SelectChangeEvent) => {\n    updateProblem(parseInt(event.target.value));\n  };\n\n  const selectRandomProblem = () => {\n    const randomIntFromInterval = (min: number, max: number) => {\n      // min and max included\n      return Math.floor(Math.random() * (max - min + 1) + min);\n    };\n    updateProblem(randomIntFromInterval(0, db.length - 1));\n  };\n\n  const makeCorrect = () => {\n    setAnswerState(true);\n  };\n\n  let comments = [];\n  for (let i = 1; i <= 10; ++i) {\n    const comm = nanikiru.get(\"해설\" + i);\n    if (!!comm) {\n      comments.push(comm);\n    }\n  }\n\n  let callArray = [];\n  for (let i = 1; i <= 4; ++i) {\n    const call = nanikiru.get(`${i}나키`);\n    if (call != null) {\n      const callTile = translateTileString(call as string);\n      callArray.push(callTile);\n    }\n  }\n  const callList = callArray.join();\n\n  return (\n    <Box paddingBottom='48px'>\n      <Toolbar>\n        <Grid container flexDirection={'row'} alignItems='center' justifyContent='space-between'>\n          <Grid item>\n            우자쿠식 나니키루 301\n          </Grid>\n          <Grid item>\n            <FormControl size=\"small\">\n              <InputLabel id=\"demo-simple-select-label\">\n                번호\n              </InputLabel>\n              <Select\n                labelId=\"demo-simple-select-label\"\n                onChange={selectProblem}\n                value={probNum.toString()}\n                label=\"문제번호\"\n                autoWidth\n              >\n                {makeProbSelect()}\n              </Select>\n            </FormControl>\n\n          </Grid>\n        </Grid>\n\n      </Toolbar>\n      <Divider />\n      <TableContainer>\n        <Table>\n          <TableBody>\n            {/**             <TableRow>\n              <TableCell>\n                <FormControl sx={{ minWidth: 50 }} size=\"small\">\n                  <InputLabel id=\"demo-simple-select-label\">\n                    번호\n                  </InputLabel>\n                  <Select\n                    labelId=\"demo-simple-select-label\"\n                    onChange={selectProblem}\n                    value={probNum.toString()}\n                    label=\"문제번호\"\n                    autoWidth\n                  >\n                    {makeProbSelect()}\n                  </Select>\n                </FormControl>\n              </TableCell>\n              <TableCell >\n                <Button\n                  variant=\"contained\"\n                  key={\"randomButton\"}\n                  onClick={selectRandomProblem}\n                >\n                  랜덤 문제\n                </Button>\n              </TableCell>\n            </TableRow>\n*/}\n            <TableRow>\n              <TableCell variant=\"head\" >문제 <br />{nanikiru.get(\"문제번호\")}:</TableCell>\n              <TableCell >{nanikiru.get(\"조건\")}</TableCell>\n            </TableRow>\n            <TableRow>\n              <TableCell variant=\"head\" width='25%'>도라\n                <br /> 표시패:</TableCell>\n              <TableCell >\n                <h2>\n                  {translateTileString(nanikiru.get(\"도라표지\") as string)}\n                </h2>\n              </TableCell>\n            </TableRow>\n            <TableRow>\n              <TableCell variant=\"head\">손패:</TableCell>\n              <TableCell >\n                <h2>\n                  {translateTileString(nanikiru.get(\"패\") as string) + ' '}\n                  {translateTileString(nanikiru.get(\"쯔모\") as string)}\n                  <br />[{callList}]\n                </h2>\n              </TableCell>\n            </TableRow>\n            {/**            <TableRow>\n              <TableCell>입력값:</TableCell>\n              <TableCell>\n                <Grid container spacing={1} alignItems=\"center\">\n                  <Grid item>\n                    <TextField\n                      sx={{ maxWidth: 140 }}\n                      size=\"small\"\n                      title=\"입력\"\n                      id=\"answer\"\n                      label=\"정답 입력\"\n                      helperText=\"ex) 7삭, 5만리치, 중\"\n                      variant=\"outlined\"\n                      name=\"answer\"\n                      defaultValue={\"\"}\n                      inputRef={answerRef}\n                    />\n                  </Grid>\n                  <Grid item>\n                    <Button variant=\"contained\" onClick={checkAnswer}>\n                      제출\n                    </Button>\n                  </Grid>\n                </Grid>\n\n              </TableCell>\n            </TableRow>\n */}\n            <TableRow>\n              <TableCell variant=\"head\">정답:</TableCell>\n              <TableCell>\n                <Grid container flexDirection={'row'} alignItems='center' justifyContent='space-between'>\n                  <Grid >\n                    {answerState &&\n                      nanikiru.get(\"정답1\") +\n                      \" \" +\n                      (nanikiru.get(\"정답2\") || \"\")}\n                  </Grid>\n                  <Grid >\n                    <Button variant=\"contained\" onClick={makeCorrect}>\n                      정답확인\n                    </Button>\n                  </Grid>\n                </Grid>\n              </TableCell>\n            </TableRow>\n            <TableRow>\n              <TableCell variant=\"head\">유효패:</TableCell>\n              <TableCell >{answerState && nanikiru.get(\"유효패\")}</TableCell>\n            </TableRow>\n            <TableRow>\n              <TableCell variant=\"head\">해설:</TableCell>\n              <TableCell>\n                {answerState &&\n                  comments.map((val, idx) => {\n                    return (\n                      <span key={val + idx.toString()}>\n                        {val + ' '}\n                      </span>\n                    );\n                  })}\n              </TableCell>\n            </TableRow>\n          </TableBody>\n        </Table>\n      </TableContainer>\n      <Paper sx={{ position: 'fixed', bottom: 0, left: 0, right: 0 }} elevation={3}>\n        <BottomNavigation\n          showLabels\n          onChange={(event, newValue) => {\n            switch (newValue) {\n              case 0:\n                { updateProblem(probNum - 1) }\n                break;\n              case 1:\n                { selectRandomProblem() }\n                break;\n              case 2:\n                { updateProblem(probNum + 1) }\n                break;\n            }\n          }}\n        >\n          <BottomNavigationAction label=\"이전문제\" icon={<BackIcon />} />\n          <BottomNavigationAction label=\"랜덤문제\" icon={<RandomIcon />} />\n          <BottomNavigationAction label=\"다음문제\" icon={<ForwardIcon />} />\n        </BottomNavigation>\n      </Paper>\n    </Box>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport App from './App';\n\nconst root = ReactDOM.createRoot(\n  document.getElementById('root') as HTMLElement\n);\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}