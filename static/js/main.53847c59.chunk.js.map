{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["table","Map","Object","entries","nanikiru301","TABLE","db","DB","App","answerRef","useRef","useState","answerState","setAnswerState","probNum","setProbNum","nanikiru","translateTileString","tileStr","tilePattern","result","patternSet","Set","i","length","has","tile","push","get","실표기","reverse","comments","comm","callArray","call","callTile","join","callList","Toolbar","TableContainer","Table","TableBody","TableRow","TableCell","FormControl","sx","minWidth","size","InputLabel","id","Select","labelId","onChange","event","current","value","parseInt","target","toString","label","autoWidth","selects","MenuItem","makeProbSelect","Button","variant","onClick","min","max","Math","floor","random","Grid","container","spacing","alignItems","item","TextField","maxWidth","title","helperText","name","defaultValue","inputRef","userAnswer","console","log","replace","correctAnswer","map","val","idx","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.53847c59.chunk.js","sourcesContent":["import {\n  Button,\n  FormControl,\n  Grid,\n  InputLabel,\n  MenuItem,\n  Select,\n  SelectChangeEvent,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  TextField,\n  Toolbar,\n} from \"@mui/material\";\nimport React, { useRef, useState } from \"react\";\nimport nanikiru301 from \"./data/nanikiru301.json\";\n\nconst table = new Map(Object.entries(nanikiru301.TABLE));\nconst db = nanikiru301.DB;\n\nfunction App() {\n  const answerRef = useRef<HTMLInputElement>(null);\n  const [answerState, setAnswerState] = useState(false);\n  const [probNum, setProbNum] = useState(0);\n\n  const nanikiru = new Map(Object.entries(db[probNum]));\n\n  const checkAnswer = () => {\n    let userAnswer = answerRef.current?.value as string;\n    console.log(userAnswer);\n    userAnswer = userAnswer.replace(/ +/g, \"\");\n    let correctAnswer =\n      (nanikiru.get(\"정답1\") as string) + (nanikiru.get(\"정답2\") || \"\");\n    correctAnswer = correctAnswer.replace(/ +/g, \"\");\n    setAnswerState(userAnswer === correctAnswer);\n  };\n\n  const translateTileString = (tileStr: string) => {\n    let tilePattern = \"\";\n    let result = [];\n    const patternSet = new Set([\"m\", \"s\", \"p\"]);\n    for (let i = tileStr.length - 1; i >= 0; --i) {\n      if (patternSet.has(tileStr[i])) {\n        tilePattern = tileStr[i];\n      } else {\n        const tile = tileStr[i] + tilePattern;\n        result.push(table.get(tile)?.실표기);\n      }\n    }\n    return result.reverse();\n  };\n\n  const makeProbSelect = () => {\n    let selects = [];\n    for (let i = 1; i <= db.length; ++i) {\n      selects.push(\n        <MenuItem key={\"op\" + i} value={i - 1}>\n          {i}\n        </MenuItem>\n      );\n    }\n\n    return selects;\n  };\n\n  const selectProblem = (event: SelectChangeEvent) => {\n    setAnswerState(false);\n    answerRef.current!.value = \"\";\n    setProbNum(parseInt(event.target.value));\n  };\n\n  const selectRandomProblem = () => {\n    const randomIntFromInterval = (min: number, max: number) => {\n      // min and max included\n      return Math.floor(Math.random() * (max - min + 1) + min);\n    };\n    setAnswerState(false);\n    answerRef.current!.value = \"\";\n    setProbNum(randomIntFromInterval(0, db.length - 1));\n  };\n\n  const makeCorrect = () => {\n    setAnswerState(true);\n  };\n\n  let comments = [];\n  for (let i = 1; i <= 10; ++i) {\n    const comm = nanikiru.get(\"해설\" + i);\n    if (!!comm) {\n      comments.push(comm);\n    }\n  }\n\n  let callArray = [];\n  for (let i = 1; i <= 4; ++i) {\n    const call = nanikiru.get(`${i}나키`);\n    if (call != null) {\n      const callTileArr = translateTileString(call as string);\n      const callTile = callTileArr.join(\"\");\n      callArray.push(callTile);\n    }\n  }\n  const callList = callArray.join();\n\n  return (\n    <>\n      <Toolbar>우자쿠식 나니키루 301</Toolbar>\n      <TableContainer>\n        <Table>\n          <TableBody>\n            <TableRow>\n              <TableCell>\n                <FormControl sx={{ minWidth: 75 }} size=\"small\">\n                  <InputLabel id=\"demo-simple-select-label\">\n                    문제번호\n                  </InputLabel>\n                  <Select\n                    labelId=\"demo-simple-select-label\"\n                    onChange={selectProblem}\n                    value={probNum.toString()}\n                    label=\"문제번호\"\n                    autoWidth\n                  >\n                    {makeProbSelect()}\n                  </Select>\n                </FormControl>\n              </TableCell>\n              <TableCell>\n                <Button\n                  variant=\"contained\"\n                  key={\"randomButton\"}\n                  onClick={selectRandomProblem}\n                >\n                  랜덤 문제\n                </Button>\n              </TableCell>\n            </TableRow>\n            <TableRow>\n              <TableCell>문제 {nanikiru.get(\"문제번호\")}:</TableCell>\n              <TableCell>{nanikiru.get(\"조건\")}</TableCell>\n            </TableRow>\n            <TableRow>\n              <TableCell>도라 표시패:</TableCell>\n              <TableCell>\n                {translateTileString(nanikiru.get(\"도라표지\") as string)}\n              </TableCell>\n            </TableRow>\n            <TableRow>\n              <TableCell>손패:</TableCell>\n              <TableCell>\n                {translateTileString(nanikiru.get(\"패\") as string)} &ensp;\n                {translateTileString(nanikiru.get(\"쯔모\") as string)}\n                <br />[{callList}]\n              </TableCell>\n            </TableRow>\n            <TableRow>\n              <TableCell>입력값:</TableCell>\n              <TableCell>\n                <Grid container spacing={1} alignItems=\"center\">\n                  <Grid item>\n                    <TextField\n                      sx={{ maxWidth: 140 }}\n                      size=\"small\"\n                      title=\"입력\"\n                      id=\"answer\"\n                      label=\"정답 입력\"\n                      helperText=\"ex) 7삭, 5만리치, 중\"\n                      variant=\"outlined\"\n                      name=\"answer\"\n                      defaultValue={\"\"}\n                      inputRef={answerRef}\n                    />\n                  </Grid>\n                  <Grid item>\n                    <Button variant=\"contained\" onClick={checkAnswer}>\n                      제출\n                    </Button>\n                  </Grid>\n                </Grid>\n              </TableCell>\n            </TableRow>\n            <TableRow>\n              <TableCell>정답:</TableCell>\n              <TableCell>\n                <Grid container spacing={1} alignItems=\"center\">\n                  <Grid item>\n                    {answerState &&\n                      nanikiru.get(\"정답1\") +\n                        \" \" +\n                        (nanikiru.get(\"정답2\") || \"\")}\n                  </Grid>\n                  <Grid item>\n                    <Button variant=\"contained\" onClick={makeCorrect}>\n                      정답확인\n                    </Button>\n                  </Grid>\n                </Grid>\n              </TableCell>\n            </TableRow>\n            <TableRow>\n              <TableCell>유효패:</TableCell>\n              <TableCell>{answerState && nanikiru.get(\"유효패\")}</TableCell>\n            </TableRow>\n            <TableRow>\n              <TableCell>해설:</TableCell>\n              <TableCell>\n                {answerState &&\n                  comments.map((val, idx) => {\n                    return (\n                      <span key={val + idx.toString()}>\n                        {val}\n                        <br />\n                      </span>\n                    );\n                  })}\n              </TableCell>\n            </TableRow>\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(\n  document.getElementById('root') as HTMLElement\n);\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}